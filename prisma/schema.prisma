// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../app/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id Int @id @default(autoincrement())
  password String
  handle String @unique @db.VarChar(30)
  name String @db.VarChar(30)
  profileImg String @default("https://res.cloudinary.com/dg7iu04zf/image/upload/v1741245410/aorfbhxinzeonxdq7guq.jpg")
  website String?
  bio String? @db.VarChar(150)
  createdAt DateTime @default(now())
  isDeleted Boolean @default(false)
  deletedAt DateTime?
  posts Post[]
  comments Comment[]
  likes Like[] // 내가 누른 좋아요
  receivedLikes Like[] @relation("LikedTargetUser") // 내가 받은 좋아요
}

model Post {
  id Int @id @default(autoincrement())
  author User @relation(fields: [authorId], references: [id])
  authorId Int
  images PostImage[]
  content String?
  createdAt DateTime @default(now())
  comments Comment[]
  likes Like[]
}

model PostImage {
  id Int @id @default(autoincrement())
  url String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  createdAt DateTime @default(now())
}

// targetUserId를 따로 저장해야 하는가? 말아야하는가?
model Comment {
  id Int @id @default(autoincrement())
  author User @relation(fields: [authorId], references: [id])
  authorId Int
  post Post @relation(fields: [postId], references: [id])
  postId Int
  content String
  parent Comment? @relation("CommentReplies", fields: [parentId], references: [id])
  parentId Int?
  replies Comment[] @relation("CommentReplies")
  Likes Like[]
  createdAt DateTime @default(now())
}

// 앞으로는 id에 String 타입을 쓰자...
model Like {
  id Int @id @default(autoincrement())
  user User @relation(fields: [userId], references: [id])
  userId Int
  targetUser User @relation("LikedTargetUser", fields: [targetUserId], references: [id])
  targetUserId Int
  post Post? @relation(fields: [postId], references: [id])
  postId Int?
  comment Comment? @relation(fields: [commentId], references: [id])
  commentId Int?
  createdAt DateTime @default(now())
}